include "http.tbh"
include "global.tbh"

dim x,y,z,m,v,timer as byte=0
dim id as byte = 1
dim pattern_timer as dword = sys.timercount32
dim LED as byte=0


dim current_sensor_data as sens_data
dim current_sensor_state as sens_state
dim current_upload_state as upload_state
dim current_xmodem_state as xmodem_state

sub on_sys_timer()

	wln_proc_timer()
	if current_sensor_state.poll_sensors=true then
		timer=timer+1
		if timer>=2 then
			set_LED(&b00000)
			lcd_poll()
			timer=0
		else
			set_LED(&b11111)
		end if
	end if
	
	dhcp_proc_timer()
end sub

sub led_init()
	
	io.num=46
	io.enabled=YES
	io.num=47
	io.enabled=YES
	io.num=48
	io.enabled=YES
	set_LED(&b00000)
	beep.divider=21600
	beep.play("BB",PL_BEEP_CANINT)
	pat.play("--B-B-B--",PL_PAT_CANINT)
	
end sub


sub lcd_scan()
	dim b as byte=0
	reset_sensors()
	pat.play(PAT_GREEN_ON,PL_PAT_CANINT)
	
	'Sends modbus request to every sensor between min and max. If a response is received, that sensors ID is saved in the array "sensor_no"
	for b=1 to MAX_SENSOR_ID_NUM
		current_upload_state.percentage = (b*100)/MAX_SENSOR_ID_NUM
		scan_sensors(b)
		doevents
	next b
	set_LED(&b00000)
	
	'If sensor ID is saved in the array "sensor_no", gets the sensor type and stores it in the corresponding index in the array "sensor_type"
	for b=0 to MAX_NUM_OF_SENSORS-1
		if current_sensor_data.sens_no(b)<>0 then
			get_sensor_type(current_sensor_data.sens_no(b))
		end if
	next b	
	
	for b=0 to MAX_NUM_OF_SENSORS-1
		if current_sensor_data.sens_no(b)<>0 then
			get_monitor_version(current_sensor_data.sens_no(b))
			end if
	next b	
	
	for b=0 to MAX_NUM_OF_SENSORS-1
		if current_sensor_data.sens_no(b)<>0 then
			get_firmware_version(current_sensor_data.sens_no(b))
		end if
	next b	
	
	
	current_sensor_state.total_sensors_detected=x
	pat.play(PAT_TWO_SHORT_GREEN,PL_PAT_CANINT)
		
end sub

'Polls all of the sensors and updates their values accordingly
sub lcd_poll()

	dim data as string
	dim b, c as byte=0
	x=0
	y=0
	z=0
	
	set_temp_warning(false)
	'For each index for the currently selected array, gets the sensor data depending on the sensor type.
	for b=0 to MAX_NUM_OF_SENSORS-1
		if current_sensor_data.sens_no(b)<>0 then
			get_sensor_data(current_sensor_data.sens_no(b),current_sensor_data.sens_type(b))
		end if
		if current_sensor_data.sens_no(b)<>0 then
			select case current_sensor_data.sens_type(b)
				case 0: 
					data="Unknown"
				case 1:					
					if current_sensor_data.sens_data(b)="" then
						data="Offline"
					else
						data=(current_sensor_data.sens_data(b) + "°C")
					end if
				case 2:		
					if current_sensor_data.sens_data(b)="" then
						data="Offline"
					else
						c=instr(1,current_sensor_data.sens_data(b),"x",1)
						data=left(current_sensor_data.sens_data(b),c-1)+ "0°C " + right(current_sensor_data.sens_data(b),len(current_sensor_data.sens_data(b))-c) + "%"
					end if			
				case 3:
					if current_sensor_data.sens_data(b)="" then
						data="Offline"
					else
						data=current_sensor_data.sens_data(b) + " lux"
					end if
				case 4:
					if current_sensor_data.sens_data(b)="" then
						data="Offline"
					else
						data=get_accelerometer_values(b)
						
					end if
			end select
			current_sensor_data.sens_data_parsed(b)=data
		end if
	next b	
	
end sub

'Sets each sensors ID in the array "sensor_no"

function get_accelerometer_values(b as byte) as string
	dim c, d, e as byte
	dim xval,yval,zval as string
	dim w as word
	
	c=instr(1,current_sensor_data.sens_data(b),"x",1)
	xval=left(current_sensor_data.sens_data(b),c-1)
	xval="x=" +  convert_accelerometer_values(xval)
	
	d=instr(1,current_sensor_data.sens_data(b),"x",2)
	yval=left(current_sensor_data.sens_data(b),d-1)
	yval=right(yval,len(yval)-c)
	yval="  y=" +  convert_accelerometer_values(yval)
	
	zval=right(current_sensor_data.sens_data(b),len(current_sensor_data.sens_data(b))-d)
	zval="  z=" +  convert_accelerometer_values(zval)
	get_accelerometer_values=xval+yval+zval
	
end function

function convert_accelerometer_values(value as string) as string
	
	dim val_i as integer
	dim i as byte
	dim len_val as byte
	dim negativ as boolean
	
	val_i = val(value)
	if val_i < 0 then
		val_i = val_i - 50	' For rounding
	else
		val_i = val_i + 50	' For rounding
	end if
	value = stri(val_i)
	len_val = len(value)
	
	if val_i < 0 then 
		negativ = true
		value = mid(value, 2, len_val - 1)
		len_val = len_val - 1
	else 
		negativ = false
	end if
	
	if len_val > 2 then
		convert_accelerometer_values = "." + mid(value, len_val - 2, 1)
	else 
		convert_accelerometer_values = ".0"
	end if
	
	if len_val > 3 then
		convert_accelerometer_values = mid(value, len_val - 3, 1) + convert_accelerometer_values
	else 
		convert_accelerometer_values = "0" + convert_accelerometer_values
	end if

	if len_val > 4 then
		convert_accelerometer_values = mid(value, len_val - 4, 1) + convert_accelerometer_values
	end if

	if negativ then
		if convert_accelerometer_values <> "0.0" then 
			convert_accelerometer_values = "-" + convert_accelerometer_values
		end if
	end if
	
end function

sub set_sensor_id(id as byte)

	current_sensor_data.sens_no(x)=id
	x=x+1
	
end sub

'Sets each sensors type in the corresponding index in the array "sensor_type"

sub set_sensor_type(stype as byte)

	current_sensor_data.sens_type(y)=stype
	y=y+1

end sub

'Sets each sensors data in the corresponding index in the array "sensor_data"

sub set_sensor_data(data as string)

	current_sensor_data.sens_data(z)=data
	z=z+1

end sub
	
sub set_monitor_version(data as string)

	current_sensor_data.mon_ver(m)=data
	m=m+1

end sub

'Sets each sensors firmware version in the corresponding index in the array "firmware_version"

sub set_firmware_version(data as string)

	current_sensor_data.firm_ver(v)=data
	v=v+1


end sub

sub set_temp_warning(warning as boolean)

	current_sensor_state.temp_warning=warning

end sub

'Resets the array index counter for the sensor arrays

sub reset_sensors()
	
	dim counter as byte
	x=0
	y=0
	z=0
	m=0
	v=0
	
	for counter=0 to MAX_NUM_OF_SENSORS-1
		current_sensor_data.sens_no(counter)=0
		current_sensor_data.sens_type(counter)=0
		current_sensor_data.sens_data(counter)=0
		current_sensor_data.mon_ver(counter)=0
		current_sensor_data.firm_ver(counter)=0
	next counter
		
end sub

'Updates the progress of the firmware uploading

sub update_xmodem_upload_progress(currentpack as word, totalpacks as word)

	dim percent as word
	percent = (currentpack*100)/totalpacks
	current_upload_state.percentage = percent
	led_firmware_uploading()
	
end sub

'Plays a pattern on the LED lights to show firmware is uploading

sub led_firmware_uploading()
	pat.play(PAT_GREEN_ON,PL_PAT_CANINT)
	if sys.timercount32-pattern_timer>=1 then
		if LED<4 then
			LED=LED+1
		else
			LED=0
		end if
		pattern_timer = sys.timercount32
	end if
	
	select case LED
	case 4:
		set_LED(&b00001)
	case 3:
		set_LED(&b00010)
	case 2:
		set_LED(&b00100)
	case 1:
		set_LED(&b01000)
	case 0:
		set_LED(&b10000)
	end select	
	
end sub

'Sets the LED lights

sub set_LED(pattern as byte)

	dim f,x as byte
	dim s as string(8)
	
	s=mid(bin(pattern),3,8)
	s=strgen(8-len(s),"0")+s	
	
	'make 5 clocks
	io.num=PL_IO_NUM_47
	for f=0 to 4
		x=1-val(mid(s,f+4,1))
		io.lineset(PL_IO_NUM_48,x)
		io.state=LOW
		io.state=HIGH
	next f
	
end sub

sub set_upload_state(state as boolean)
	current_upload_state.upload_successful=state
	if state=true then
		pat.play(PAT_TWO_SHORT_GREEN,PL_PAT_CANINT)
	else
		pat.play(PAT_LONG_RED,PL_PAT_CANINT)
	end if
	set_LED(&b00000)
end sub

function xmodem_in_prog() as boolean
	xmodem_in_prog=current_xmodem_state.xmodeminprog	
end function

sub set_xmodem_in_prog(state as boolean)
	current_xmodem_state.xmodeminprog=state	
	pat.play(PAT_GREEN_ON,PL_PAT_CANINT)
end sub

sub reset_upload_percentage()
	current_upload_state.percentage=0
end sub

sub init_wln()
	wln_start("Tibbo9F",WLN_SECURITY_MODE_WPA2,"16836836",PL_WLN_DOMAIN_FCC,YES,PL_WLN_ASCAN_INFRASTRUCTURE)
'	wln_start("Hsiang",WLN_SECURITY_MODE_WPA2,"Dublin111",PL_WLN_DOMAIN_FCC,YES,PL_WLN_ASCAN_INFRASTRUCTURE)
end sub

sub init_dhcp()
	pat.play(PAT_ONE_SHORT_GREEN,PL_PAT_CANINT)
	dhcp_start(PL_SOCK_INTERFACE_NET,"","")
end sub

sub init_sockets()
	dim f as byte
	for f=8 to 15
		sock.num=f
		sock.txbuffrq(4)
		sock.varbuffrq(4)
		sock.redir(PL_REDIR_SOCK0 + sock.num)
		sock.protocol=PL_SOCK_PROTOCOL_TCP
		sock.inconmode=PL_SOCK_INCONMODE_ANY_IP_ANY_PORT
		sock.allowedinterfaces="NET,WLN"
		sock.httpportlist="80,90"
	next f
	sys.buffalloc()
end sub

sub callback_dhcp_ok(renew as no_yes, interface as pl_sock_interfaces, byref ip as string, byref gateway_ip as string, byref netmask as string, lease_time as dword)
	if interface=PL_SOCK_INTERFACE_NET then
		if renew=YES and net.ip<>ip then
			sys.reboot
		end if
		if net.ip<>ip then
			net.ip=ip
			net.gatewayip=gateway_ip
			net.netmask=netmask
		end if
	end if
	
	if interface=PL_SOCK_INTERFACE_WLN then
		if renew=YES and wln.ip<>ip then
			sys.reboot
		end if
		if wln.ip<>ip then
			wln.ip=ip
			wln.gatewayip=gateway_ip
			wln.netmask=netmask
		end if
	end if
	pat.play(PAT_TWO_SHORT_GREEN,PL_PAT_CANINT)
end sub

sub on_sock_data_arrival()
	dhcp_proc_data()
'	wln_proc_data()
end sub

sub on_wln_task_complete(completed_task as pl_wln_tasks)
	wln_proc_task_complete(completed_task)
end sub

sub on_wln_event(wln_event as pl_wln_events)
	wln_proc_event(wln_event)
end sub

sub callback_wln_ok()
	dhcp_start(PL_SOCK_INTERFACE_WLN,"","")
end sub

sub callback_dhcp_failure(interface as pl_sock_interfaces,failure_code as en_dhcp_status_codes)

	pat.play(PAT_LONG_RED,PL_PAT_CANINT)
	
end sub

sub callback_dhcp_pre_clear_ip(interface as pl_sock_interfaces)
	
end sub

sub callback_dhcp_pre_buffrq(required_buff_pages as byte)
	
end sub

sub callback_dhcp_buff_released()
	
end sub

sub callback_wln_failure(wln_state as en_wln_status_codes)
	
end sub

sub callback_wln_starting_association()
	
end sub

sub callback_wln_pre_buffrq(required_buff_pages as byte)
	
end sub

sub callback_wln_mkey_progress_update(progress as byte)
	
end sub

sub callback_wln_rescan_result(current_rssi as byte, scan_rssi as byte, different_ap as no_yes)
	
end sub

sub callback_wln_rescan_for_better_ap()
	
end sub

