#include "global.th"
#include "modbus.th"
#define MODBUS_TIMEOUT 5000
#define MB_RQ_SIZE sizeof(modbus_req)
static modbus_state _state;
static dword _timeout;
static string _packet; 	// data accumulation buffer
static byte _pdu_len;	// PDU length byte

//Initializes Modbus state as idle

void
modbus_init()
{
	_state = MODBUS_IDLE;
}

//Generates CRC

word 
crc16(byte *data, byte byte_cnt)
{
    byte crc_hi = 0xFF;  
    byte crc_lo = 0xFF; 
    word idx; 
    
    while(byte_cnt--) { 
        idx = crc_hi ^ *data++; 
        crc_hi = crc_lo ^ _crc_table_hi[idx];
        crc_lo = _crc_table_lo[idx];
    }
	return (crc_hi << 8) | crc_lo;
}

//Issues a modbus request

void
modbus_request(byte devaddr, byte request, word start, word count, string regdata)
{
	string<MB_RQ_SIZE+4> data;
	data = chr(devaddr);
	data += chr(request);
	data += chr(start >> 8);
	data += chr(start & 0xFF);
	if(0 == len(regdata)) {
		data += chr(count >> 8);
		data += chr(count & 0xFF);
	} else {
		data += regdata;
	}
	word crc = crc16((byte *)&data[0], len(data));
	data += chr(crc >> 8);
	data += chr(crc & 0xFF);
	_packet = "";
	_state = MODBUS_IDLE;
	_timeout = sys.timercountms + MODBUS_TIMEOUT;
	serial_send(data);
}

void 
modbus_delay() 
{
	dword delay;
    delay = sys.timercountms;
    if (delay + 1 < delay) {
        delay = delay + 1;
        while (sys.timercountms < delay){}
	}else {
       while (sys.timercountms - delay < 1){}
    }
	
}


//Receives and parses ModBus PDU

void
on_modbus_data_arrival()
{
//	modbus_delay();
	string tmp = "";
	tmp = ser.getdata(255);
	switch(_state) {
		case MODBUS_FINISHED:
			sys.debugprint("Previous ModBus packet was not processed");
		case MODBUS_IDLE:
			_packet = "";
			_state = MODBUS_RECEIVING;
		case MODBUS_RECEIVING:
			_packet += tmp;
			break;
	}
	if(len(_packet) >= 2) {
		_pdu_len = _packet[2] + 5; // Byte count, including slave address, crc, byte length and function code
		if(len(_packet) >= _pdu_len) {
			modbus_delay();
			string c1 = _packet[9];
			string c2 = _packet[10];
			if(c1=="-86"  && c2=="85"){	
				_state = MODBUS_FINISHED;			
			}
			else{
				
			}
		}
	}
}

//Scans sensor and waits 0.1 seconds for a response

bool
scan_sensors(unsigned char w)
{
	led_firmware_uploading();
	modbus_request(w, READ_HOLDING_REGISTERS, SCAN_SENSORS, 4, "");
	
	sys.timercountms=0;
	while(!modbus_finished()){
		modbus_first_scan();
		if (sys.timercountms>100){
		break;
		}
	}
	if (modbus_finished()){
		set_sensor_id(w);
		return true;
	}
	
	if(modbus_resend()){
	modbus_request(w, READ_HOLDING_REGISTERS, SCAN_SENSORS, 4, "");
	get_response();
	}
	
	if (modbus_finished()){
		set_sensor_id(w);
	}
	return true;
	
}

//On the first scan of the sensors, the first data packet is not always received correctly. This first scan detects this situation and changes state so that a second request is sent if necessary.

void
modbus_first_scan()
{
//	modbus_delay();
	string tmp = "";
	tmp = ser.getdata(255);
	switch(_state) {
		case MODBUS_FINISHED:
			sys.debugprint("Previous ModBus packet was not processed");
		case MODBUS_IDLE:
			_packet = "";
			_state = MODBUS_RECEIVING;
		case MODBUS_RECEIVING:
			_packet += tmp;
			break;
	}
	if(len(_packet) >= 2) {
		_pdu_len = _packet[2] + 5; // Byte count, including slave address, crc, byte length and function code
		if(len(_packet) >= _pdu_len) {
			modbus_delay();
			//char c = "&hFF" 
			string c1 = _packet[9];
			string c2 = _packet[10];
			if(c1=="-86"  && c2=="85"){	
				_state = MODBUS_FINISHED;			
			}
			else{
				_state = MODBUS_RESEND;
			}
		}
	}
}

//Reprograms sensor address

void
reprogram_address(byte oldaddr, byte newaddr)
{
	string args;
	args = chr(0) +  chr(newaddr);
	modbus_request(oldaddr, PRESET_SINGLE_REGISTER, SCAN_SENSORS, 1, args);
}

//Gets sensor type

void
get_sensor_type(unsigned char w)
{
	string result;
	modbus_request(w, READ_INPUT_REGISTERS, GET_SENSOR_TYPE, 1, "");
	get_response();
	result = modbus_result();
	result=result[4];
	if (result=="1"|| result=="2" || result=="3" || result=="4"){
	set_sensor_type(result);
	} else {
		set_sensor_type(0);
	}
}

//Gets monitor version

void
get_monitor_version(unsigned char w)
{
	string result;
	modbus_request(w, READ_INPUT_REGISTERS, GET_MONITOR_VERSION, 1, "");
	get_response();
	result = modbus_result();
	result=get_version(result);
	set_monitor_version(result);
}

//Gets firmware version

void
get_firmware_version(unsigned char w)
{
	string result;
	modbus_request(w, READ_INPUT_REGISTERS, GET_FIRMWARE_VERSION, 1, "");
	get_response();
	result = modbus_result();
	result=get_version(result);
	set_firmware_version(result);
}

//Polls temperature sensor

string 
get_version(string rawdata){
	string version;
	version=str(rawdata[3])+"."+str(rawdata[4]);
	return version;
}


//Sends request to get data depending on the sensor type. Handles request accordingly.

void
get_sensor_data(unsigned char w,unsigned char x)
{
//	modbus_delay();
	string result, rawdata;
	dword tmp;
	
	switch(x){
	case 0:
		result="Unknown";
		break;
	case 1:	//temp
		modbus_request(w, READ_INPUT_REGISTERS, READ_TEMP_VALUE, 1, "");
		break;
	case 2:	//temp&hum
		modbus_request(w, READ_INPUT_REGISTERS, READ_TEMP_H_VALUE, 1, "");
		break;
	case 3:	//light
		modbus_request(w, READ_INPUT_REGISTERS, READ_LIGHT_VALUE, 1, "");
		break;
	case 4:	//shock
		//modbus_request(w, READ_INPUT_REGISTERS, READ_SHOCK_VALUE_X, 1, "");
		modbus_request(w, READ_INPUT_REGISTERS, READ_SHOCK_VALUE_X, 1, "");
		get_response();
		rawdata = modbus_result();
		
		modbus_request(w, READ_INPUT_REGISTERS, READ_SHOCK_VALUE_Y, 1, "");
		get_response();
		rawdata = rawdata+modbus_result();
		
		modbus_request(w, READ_INPUT_REGISTERS, READ_SHOCK_VALUE_Z, 1, "");
	 
		break;
	default:
	}
	
	get_response();
	rawdata = rawdata + modbus_result();
	if(rawdata != "") {
			switch(x) {
				
				case 1:
					result=get_temp(rawdata);
					break;
				case 2:
					result=get_temp_and_hum(rawdata, w);
					break;
				case 3:
					result=get_light(rawdata);
					break;
				case 4:
					result=get_shock(rawdata);
					break;
				default:
		}
	}
	set_sensor_data(result);
}

//Polls temperature and humidity sensor

string 
get_temp_and_hum(string rawdata, unsigned char w){
	string temp, hum, result;
	temp=hex_to_dec(hex(rawdata[3]),hex(rawdata[4]));
	if (val(temp)>32767) {
		temp=val(temp)-65536;
	}
	temp=left(temp,len(temp)-1)+"."+right(temp,1);
	if (len(temp)<=2){
	temp="0"+temp;
	}
	modbus_request(w, READ_INPUT_REGISTERS, READ_HUM_VALUE, 1, "");
	get_response();
	rawdata = modbus_result();
	hum=hex_to_dec(hex(rawdata[3]),hex(rawdata[4]));
	hum=left(hum,len(hum)-1)+"."+right(hum,1);
	if (len(hum)<=2){
	hum="0"+hum;
	};
	if (val(temp)<5 || val(temp)>49){
		set_temp_warning(true);
	} else {
		set_temp_warning(false);
	}
	result=temp+"x"+hum;
	return result;
} 

//Polls temperature sensor

string 
get_temp(string rawdata){
	string temp;
	temp=hex_to_dec(hex(rawdata[3]),hex(rawdata[4]));
	if (val(temp)>32767) {
		temp=val(temp)-65536;
	}
	temp=left(temp,len(temp)-2)+"."+right(temp,2);
	if (len(temp)<=3){
	temp="0"+temp;
	}
	return temp;
}

//Polls light sensor

string 
get_light(string rawdata){
	string light;
	light=hex_to_dec(hex(rawdata[3]),hex(rawdata[4]));
	light=val(light);
	return light;
}

//Polls shock sensor

string 
get_shock(string rawdata){

	string shock, shockx, shocky, shockz;
	signed int intx, inty, intz;
	intx=hex_to_dec_in_word(hex(rawdata[3]),hex(rawdata[4]));
	inty=hex_to_dec_in_word(hex(rawdata[10]),hex(rawdata[11]));
	intz=hex_to_dec_in_word(hex(rawdata[17]),hex(rawdata[18]));
	
//	shock_as_int=hex_to_dec(hex(rawdata[3]),hex(rawdata[4])) + "x" + hex_to_dec(hex(rawdata[10]),hex(rawdata[11]))  + "x" + hex_to_dec(hex(rawdata[18]),hex(rawdata[19]));
	shockx=intx;
	shocky=inty;
	shockz=intz;
	shock=shockx+"x"+shocky+"x"+shockz;
	return shock;




//	short short_x, short_y, short_z;
//	float float_x, float_y, float_z; 
	
//	short_x=hex_to_dec_in_word(hex(rawdata[3]),hex(rawdata[4]));
//	short_y=hex_to_dec_in_word(hex(rawdata[10]),hex(rawdata[11]));
//	short_z=hex_to_dec_in_word(hex(rawdata[18]),hex(rawdata[19]));
	
//	float_x=short_x;
//	float_x=float_x*29/10000;

//	float_y=short_y;
//	float_y=float_y*29/10000;
	
//	float_z=short_z;
//	float_z=float_z*29/10000;


}
//Converts hex value to decimal value

string
hex_to_dec(string hi,string lo)
{
	string dec_val;
	if (len(lo)==3){
		lo="0"+right(lo,1);
	}else{
		lo=right(lo,2);
	}
	dec_val=hi+lo;
	dec_val=val(dec_val);
	return dec_val;	
}

word hex_to_dec_in_word(string hi,string lo)
{
	string dec_val;
	if (len(lo)==3){
		lo="0"+right(lo,1);
	}else{
		lo=right(lo,2);
	}
	dec_val=hi+lo;
	dec_val=val(dec_val);
	return dec_val;	
}

//Waits 0.1 seconds for a response from sensor
void get_response(){
	sys.timercountms=0;
	while(!modbus_finished()){
		on_modbus_data_arrival();
		if (sys.timercountms>100){
		break;
		}
	}
}

//Returns Modbus true if Modbus state is finished

bool
modbus_finished()
{
	return _state == MODBUS_FINISHED;
}

//Returns Modbus true if Modbus state is resend

bool
modbus_resend()
{
	return _state == MODBUS_RESEND;
}

//Returns results of modbus request

string
modbus_result()
{
	return _packet;
}