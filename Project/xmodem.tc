#include "modbus.th"

bool upload_succesful=true;
//upload_state current_upload_state;

#define XMODEM_PACKET_SIZE      128
#define XMODEM_SOH              0x01
#define XMODEM_EOT              0x04
#define XMODEM_ACK              0x06 
#define XMODEM_NACK             0x15
#define XMODEM_ETB              0x17
#define XMODEM_CAN              0x18
#define XMODEM_16BITCRC         'C'
#define XMODEM_EOF              0x1A    
#define MAX_RETRIES             10
#define XMODEM_TIMEOUT			3000	

//Uploads firmware/monitor file to sensor via XModem

bool
do_xmodem_upload(string filename)
{
	set_xmodem_in_prog(true);
	reset_upload_percentage();
	set_upload_state(true);
	string data, pkt;
	word job_size, block_num;
	//Clears serial buffer and waits for 3 seconds to give sensor time to send "NACK"
	ser.getdata(255);
	while(ser.rxlen <1){
		if (xmodem_in_prog()==true){
			doevents;} 
		else {
			return true;
		}
	}
	//If "NACK" is received, begins XModem upload. Otherwise shows failed screen.
	for(;;) {
		doevents;
		pkt = ser.getdata(255);
		if(pkt[0] == XMODEM_NACK || pkt[0] == 'C' || pkt[0] == XMODEM_ACK)
			break;
		set_upload_state(false);
		return false;
	}
	//Carries out XModem upload. If the total number of blocks sent equal the total number of blocks, upload successful screen is displayed.
	romfile.open(filename);
	job_size=romfile.size/128;
	for(block_num=1; block_num<=job_size; ++block_num) {
		doevents;
		data=romfile.getdata(128);
		if (block_num==job_size)
			set_upload_state(true);
		if(!transmit_block(data, block_num, job_size))
			break;
	}
	serial_send(chr(XMODEM_EOT));
	serial_send(chr(XMODEM_ETB));
	if (upload_succesful)  
		set_upload_state(true);
	return OK;
}

//Transmits a block of data using the XModem protocol

static bool
transmit_block(byte *data, word blk, word blockcnt)
{
	doevents;
	string pkt, rpl;
	byte retries;
	byte i;
	word cksum;
	for(retries=0;;) {
		// Header 
		pkt = chr(XMODEM_SOH) + chr(blk & 0xFF) + chr(0xFF - (blk & 0xFF));
		cksum = 0;
		//Body
		for(i=0; i<XMODEM_PACKET_SIZE; ++i) {
			pkt += chr(data[i]);
			cksum += data[i];
		}
		//
		pkt += chr(cksum & 0xFF);
		sys.debugprint("Sending packet #" + str(blk) + " of " + str(blockcnt) + "\r\n");
		update_xmodem_upload_progress(blk, blockcnt);
retransmit:	
		serial_send(pkt);
		sys.timercountms=0;
		do {
			rpl = ser.getdata(128);
			//If waiting more than 3 seconds for a response, the upload is considered a failure and upload failed screen is displayed.
			if(sys.timercountms>3000)
			{
				set_upload_state(false);
				upload_succesful=false;
				return false;
			}			
		} while(rpl == "");
		//Parses reply packet
		switch(rpl[0]) {
			case XMODEM_NACK:
				//If max retries is reached, returns fales
				if(MAX_RETRIES == ++retries) {
					break;
				}
				goto retransmit;
			case XMODEM_ACK:
				//Processes ACK
				return true;				
				//If unknown reply is received, returns false
			default:
				break;
		}
	} 
	return false;
}